-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Cvt_RGB_to_YCrCb is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    p_src_data_stream_0_V_empty_n : IN STD_LOGIC;
    p_src_data_stream_0_V_read : OUT STD_LOGIC;
    p_src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    p_src_data_stream_1_V_empty_n : IN STD_LOGIC;
    p_src_data_stream_1_V_read : OUT STD_LOGIC;
    p_src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    p_src_data_stream_2_V_empty_n : IN STD_LOGIC;
    p_src_data_stream_2_V_read : OUT STD_LOGIC;
    p_dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_dst_data_stream_0_V_full_n : IN STD_LOGIC;
    p_dst_data_stream_0_V_write : OUT STD_LOGIC;
    p_dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_dst_data_stream_1_V_full_n : IN STD_LOGIC;
    p_dst_data_stream_1_V_write : OUT STD_LOGIC;
    p_dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_dst_data_stream_2_V_full_n : IN STD_LOGIC;
    p_dst_data_stream_2_V_write : OUT STD_LOGIC );
end;


architecture behav of Cvt_RGB_to_YCrCb is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv11_438 : STD_LOGIC_VECTOR (10 downto 0) := "10000111000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_780 : STD_LOGIC_VECTOR (10 downto 0) := "11110000000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_FFB6 : STD_LOGIC_VECTOR (15 downto 0) := "1111111110110110";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv42_8000 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000001000000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv18_8000 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_const_lv8_EB : STD_LOGIC_VECTOR (7 downto 0) := "11101011";
    constant ap_const_lv8_EF : STD_LOGIC_VECTOR (7 downto 0) := "11101111";
    constant ap_const_lv14_19 : STD_LOGIC_VECTOR (13 downto 0) := "00000000011001";
    constant ap_const_lv16_5E : STD_LOGIC_VECTOR (15 downto 0) := "0000000001011110";
    constant ap_const_lv15_7FDA : STD_LOGIC_VECTOR (14 downto 0) := "111111111011010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_src_data_stream_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_reg_589 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_src_data_stream_1_V_blk_n : STD_LOGIC;
    signal p_src_data_stream_2_V_blk_n : STD_LOGIC;
    signal p_dst_data_stream_0_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_reg_pp0_iter4_exitcond_reg_589 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_dst_data_stream_1_V_blk_n : STD_LOGIC;
    signal p_dst_data_stream_2_V_blk_n : STD_LOGIC;
    signal j_reg_174 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond5_fu_185_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_3_fu_191_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_3_reg_584 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_reg_pp0_iter1_exitcond_reg_589 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_exitcond_reg_589 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_exitcond_reg_589 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_fu_203_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_94_reg_598 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter2_tmp_94_reg_598 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_95_reg_607 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter2_tmp_95_reg_607 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_96_reg_614 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter2_tmp_96_reg_614 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_556_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp2_reg_622 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal grp_fu_564_p3 : STD_LOGIC_VECTOR (40 downto 0);
    signal p_Val2_7_reg_627 : STD_LOGIC_VECTOR (40 downto 0);
    signal tmp_20_fu_262_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_20_reg_632 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_V_reg_637 : STD_LOGIC_VECTOR (7 downto 0);
    signal u_V_reg_642 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp4_fu_424_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp4_reg_647 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_88_reg_652 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_89_reg_657 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_y_V_fu_474_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_y_V_reg_662 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_u_V_fu_486_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_u_V_reg_668 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_v_V_fu_509_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_v_V_reg_674 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal i_reg_163 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp35_fu_215_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl4_fu_226_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl5_fu_237_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl4_cast_fu_233_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl5_cast_fu_244_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_6_fu_248_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_14_cast_fu_254_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_20_fu_262_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal OP2_V_1_cast1_fu_209_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl1_fu_271_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl2_fu_282_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl1_cast_fu_278_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl2_cast_fu_289_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl3_fu_299_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Val2_s_fu_293_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl3_cast_fu_306_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_cast_fu_310_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp2_cast_fu_320_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_fu_314_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_323_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl8_fu_339_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl9_fu_354_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl8_cast1_fu_346_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl9_cast_fu_361_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_Val2_3_fu_365_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_27_fu_371_p1 : STD_LOGIC_VECTOR (41 downto 0);
    signal tmp_28_fu_374_p1 : STD_LOGIC_VECTOR (41 downto 0);
    signal p_Val2_20_fu_378_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal addconv_fu_384_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal p_shl_fu_400_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl_cast_fu_407_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl8_cast_fu_350_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_572_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_5_fu_411_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_56_cast_fu_417_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_57_cast_fu_420_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp4_cast_fu_450_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_29_fu_453_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp5_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_90_fu_493_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp8_fu_503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal v_V_fu_459_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_31_fu_517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_fu_530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_fu_543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_556_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_556_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_556_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_564_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_564_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_564_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_572_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_572_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_556_p10 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_556_p20 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_564_p20 : STD_LOGIC_VECTOR (40 downto 0);
    signal grp_fu_572_p10 : STD_LOGIC_VECTOR (14 downto 0);

    component contrastadj_mac_mbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (12 downto 0);
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component contrastadj_mac_mcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (39 downto 0);
        dout : OUT STD_LOGIC_VECTOR (40 downto 0) );
    end component;


    component contrastadj_mac_mdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    contrastadj_mac_mbkb_U13 : component contrastadj_mac_mbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 8,
        din2_WIDTH => 13,
        dout_WIDTH => 14)
    port map (
        din0 => grp_fu_556_p0,
        din1 => grp_fu_556_p1,
        din2 => grp_fu_556_p2,
        dout => grp_fu_556_p3);

    contrastadj_mac_mcud_U14 : component contrastadj_mac_mcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 40,
        dout_WIDTH => 41)
    port map (
        din0 => grp_fu_564_p0,
        din1 => grp_fu_564_p1,
        din2 => grp_fu_564_p2,
        dout => grp_fu_564_p3);

    contrastadj_mac_mdEe_U15 : component contrastadj_mac_mdEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_572_p0,
        din1 => grp_fu_572_p1,
        din2 => tmp_20_reg_632,
        dout => grp_fu_572_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((exitcond5_fu_185_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((exitcond5_fu_185_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                elsif (((exitcond5_fu_185_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_reg_163 <= i_3_reg_584;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_163 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    j_reg_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_197_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                j_reg_174 <= j_2_fu_203_p2;
            elsif (((exitcond5_fu_185_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_174 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_reg_pp0_iter1_exitcond_reg_589 <= exitcond_reg_589;
                exitcond_reg_589 <= exitcond_fu_197_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_reg_pp0_iter2_exitcond_reg_589 <= ap_reg_pp0_iter1_exitcond_reg_589;
                ap_reg_pp0_iter2_tmp_94_reg_598 <= tmp_94_reg_598;
                ap_reg_pp0_iter2_tmp_95_reg_607 <= tmp_95_reg_607;
                ap_reg_pp0_iter2_tmp_96_reg_614 <= tmp_96_reg_614;
                ap_reg_pp0_iter3_exitcond_reg_589 <= ap_reg_pp0_iter2_exitcond_reg_589;
                ap_reg_pp0_iter4_exitcond_reg_589 <= ap_reg_pp0_iter3_exitcond_reg_589;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_3_reg_584 <= i_3_fu_191_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter1_exitcond_reg_589 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_Val2_7_reg_627 <= grp_fu_564_p3;
                tmp2_reg_622 <= grp_fu_556_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter3_exitcond_reg_589 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_u_V_reg_668 <= p_u_V_fu_486_p3;
                p_v_V_reg_674 <= p_v_V_fu_509_p3;
                p_y_V_reg_662 <= p_y_V_fu_474_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_exitcond_reg_589 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp4_reg_647 <= tmp4_fu_424_p2;
                tmp_88_reg_652 <= tmp_s_fu_323_p2(15 downto 12);
                tmp_89_reg_657 <= addconv_fu_384_p2(15 downto 12);
                u_V_reg_642 <= addconv_fu_384_p2(15 downto 8);
                y_V_reg_637 <= tmp_s_fu_323_p2(15 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter1_exitcond_reg_589 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_20_reg_632 <= tmp_20_fu_262_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_589 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_94_reg_598 <= p_src_data_stream_0_V_dout;
                tmp_95_reg_607 <= p_src_data_stream_1_V_dout;
                tmp_96_reg_614 <= p_src_data_stream_2_V_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, exitcond5_fu_185_p2, ap_CS_fsm_state2, exitcond_fu_197_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond5_fu_185_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond_fu_197_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((exitcond_fu_197_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    OP2_V_1_cast1_fu_209_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_95_reg_607),16));
    addconv_fu_384_p2 <= std_logic_vector(unsigned(ap_const_lv42_8000) + unsigned(p_Val2_20_fu_378_p2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state9 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(p_src_data_stream_0_V_empty_n, p_src_data_stream_1_V_empty_n, p_src_data_stream_2_V_empty_n, p_dst_data_stream_0_V_full_n, p_dst_data_stream_1_V_full_n, p_dst_data_stream_2_V_full_n, ap_enable_reg_pp0_iter1, exitcond_reg_589, ap_enable_reg_pp0_iter5, ap_reg_pp0_iter4_exitcond_reg_589)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (((ap_reg_pp0_iter4_exitcond_reg_589 = ap_const_lv1_0) and (p_dst_data_stream_2_V_full_n = ap_const_logic_0)) or ((ap_reg_pp0_iter4_exitcond_reg_589 = ap_const_lv1_0) and (p_dst_data_stream_1_V_full_n = ap_const_logic_0)) or ((ap_reg_pp0_iter4_exitcond_reg_589 = ap_const_lv1_0) and (p_dst_data_stream_0_V_full_n = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond_reg_589 = ap_const_lv1_0) and (p_src_data_stream_2_V_empty_n = ap_const_logic_0)) or ((exitcond_reg_589 = ap_const_lv1_0) and (p_src_data_stream_1_V_empty_n = ap_const_logic_0)) or ((exitcond_reg_589 = ap_const_lv1_0) and (p_src_data_stream_0_V_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(p_src_data_stream_0_V_empty_n, p_src_data_stream_1_V_empty_n, p_src_data_stream_2_V_empty_n, p_dst_data_stream_0_V_full_n, p_dst_data_stream_1_V_full_n, p_dst_data_stream_2_V_full_n, ap_enable_reg_pp0_iter1, exitcond_reg_589, ap_enable_reg_pp0_iter5, ap_reg_pp0_iter4_exitcond_reg_589)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (((ap_reg_pp0_iter4_exitcond_reg_589 = ap_const_lv1_0) and (p_dst_data_stream_2_V_full_n = ap_const_logic_0)) or ((ap_reg_pp0_iter4_exitcond_reg_589 = ap_const_lv1_0) and (p_dst_data_stream_1_V_full_n = ap_const_logic_0)) or ((ap_reg_pp0_iter4_exitcond_reg_589 = ap_const_lv1_0) and (p_dst_data_stream_0_V_full_n = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond_reg_589 = ap_const_lv1_0) and (p_src_data_stream_2_V_empty_n = ap_const_logic_0)) or ((exitcond_reg_589 = ap_const_lv1_0) and (p_src_data_stream_1_V_empty_n = ap_const_logic_0)) or ((exitcond_reg_589 = ap_const_lv1_0) and (p_src_data_stream_0_V_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(p_src_data_stream_0_V_empty_n, p_src_data_stream_1_V_empty_n, p_src_data_stream_2_V_empty_n, p_dst_data_stream_0_V_full_n, p_dst_data_stream_1_V_full_n, p_dst_data_stream_2_V_full_n, ap_enable_reg_pp0_iter1, exitcond_reg_589, ap_enable_reg_pp0_iter5, ap_reg_pp0_iter4_exitcond_reg_589)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (((ap_reg_pp0_iter4_exitcond_reg_589 = ap_const_lv1_0) and (p_dst_data_stream_2_V_full_n = ap_const_logic_0)) or ((ap_reg_pp0_iter4_exitcond_reg_589 = ap_const_lv1_0) and (p_dst_data_stream_1_V_full_n = ap_const_logic_0)) or ((ap_reg_pp0_iter4_exitcond_reg_589 = ap_const_lv1_0) and (p_dst_data_stream_0_V_full_n = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond_reg_589 = ap_const_lv1_0) and (p_src_data_stream_2_V_empty_n = ap_const_logic_0)) or ((exitcond_reg_589 = ap_const_lv1_0) and (p_src_data_stream_1_V_empty_n = ap_const_logic_0)) or ((exitcond_reg_589 = ap_const_lv1_0) and (p_src_data_stream_0_V_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(p_src_data_stream_0_V_empty_n, p_src_data_stream_1_V_empty_n, p_src_data_stream_2_V_empty_n, exitcond_reg_589)
    begin
                ap_block_state4_pp0_stage0_iter1 <= (((exitcond_reg_589 = ap_const_lv1_0) and (p_src_data_stream_2_V_empty_n = ap_const_logic_0)) or ((exitcond_reg_589 = ap_const_lv1_0) and (p_src_data_stream_1_V_empty_n = ap_const_logic_0)) or ((exitcond_reg_589 = ap_const_lv1_0) and (p_src_data_stream_0_V_empty_n = ap_const_logic_0)));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_pp0_stage0_iter5_assign_proc : process(p_dst_data_stream_0_V_full_n, p_dst_data_stream_1_V_full_n, p_dst_data_stream_2_V_full_n, ap_reg_pp0_iter4_exitcond_reg_589)
    begin
                ap_block_state8_pp0_stage0_iter5 <= (((ap_reg_pp0_iter4_exitcond_reg_589 = ap_const_lv1_0) and (p_dst_data_stream_2_V_full_n = ap_const_logic_0)) or ((ap_reg_pp0_iter4_exitcond_reg_589 = ap_const_lv1_0) and (p_dst_data_stream_1_V_full_n = ap_const_logic_0)) or ((ap_reg_pp0_iter4_exitcond_reg_589 = ap_const_lv1_0) and (p_dst_data_stream_0_V_full_n = ap_const_logic_0)));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(exitcond_fu_197_p2)
    begin
        if ((exitcond_fu_197_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, exitcond5_fu_185_p2, ap_CS_fsm_state2)
    begin
        if (((exitcond5_fu_185_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(exitcond5_fu_185_p2, ap_CS_fsm_state2)
    begin
        if (((exitcond5_fu_185_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond5_fu_185_p2 <= "1" when (i_reg_163 = ap_const_lv11_438) else "0";
    exitcond_fu_197_p2 <= "1" when (j_reg_174 = ap_const_lv11_780) else "0";
    grp_fu_556_p0 <= ap_const_lv14_19(6 - 1 downto 0);
    grp_fu_556_p1 <= grp_fu_556_p10(8 - 1 downto 0);
    grp_fu_556_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_96_reg_614),14));
    grp_fu_556_p2 <= grp_fu_556_p20(13 - 1 downto 0);
    grp_fu_556_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp35_fu_215_p3),14));
    grp_fu_564_p0 <= ap_const_lv16_5E(8 - 1 downto 0);
    grp_fu_564_p1 <= OP2_V_1_cast1_fu_209_p1(8 - 1 downto 0);
    grp_fu_564_p2 <= grp_fu_564_p20(40 - 1 downto 0);
    grp_fu_564_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_14_cast_fu_254_p1),41));
    grp_fu_572_p0 <= ap_const_lv15_7FDA(7 - 1 downto 0);
    grp_fu_572_p1 <= grp_fu_572_p10(8 - 1 downto 0);
    grp_fu_572_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp0_iter2_tmp_94_reg_598),15));
    i_3_fu_191_p2 <= std_logic_vector(unsigned(i_reg_163) + unsigned(ap_const_lv11_1));
    icmp5_fu_481_p2 <= "1" when (tmp_89_reg_657 = ap_const_lv4_0) else "0";
    icmp8_fu_503_p2 <= "1" when (tmp_90_fu_493_p4 = ap_const_lv4_0) else "0";
    icmp_fu_469_p2 <= "1" when (tmp_88_reg_652 = ap_const_lv4_0) else "0";
    j_2_fu_203_p2 <= std_logic_vector(unsigned(j_reg_174) + unsigned(ap_const_lv11_1));
        p_Val2_14_cast_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_6_fu_248_p2),40));

    p_Val2_20_fu_378_p2 <= std_logic_vector(unsigned(tmp_27_fu_371_p1) - unsigned(tmp_28_fu_374_p1));
    p_Val2_3_fu_365_p2 <= std_logic_vector(unsigned(p_shl8_cast1_fu_346_p1) + unsigned(p_shl9_cast_fu_361_p1));
    p_Val2_5_fu_411_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_407_p1) - unsigned(p_shl8_cast_fu_350_p1));
    p_Val2_6_fu_248_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_233_p1) - unsigned(p_shl5_cast_fu_244_p1));
    p_Val2_s_fu_293_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_278_p1) + unsigned(p_shl2_cast_fu_289_p1));

    p_dst_data_stream_0_V_blk_n_assign_proc : process(p_dst_data_stream_0_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter5, ap_reg_pp0_iter4_exitcond_reg_589)
    begin
        if (((ap_reg_pp0_iter4_exitcond_reg_589 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            p_dst_data_stream_0_V_blk_n <= p_dst_data_stream_0_V_full_n;
        else 
            p_dst_data_stream_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_dst_data_stream_0_V_din <= 
        ap_const_lv8_EB when (tmp_31_fu_517_p2(0) = '1') else 
        p_y_V_reg_662;

    p_dst_data_stream_0_V_write_assign_proc : process(ap_enable_reg_pp0_iter5, ap_reg_pp0_iter4_exitcond_reg_589, ap_block_pp0_stage0_11001)
    begin
        if (((ap_reg_pp0_iter4_exitcond_reg_589 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_dst_data_stream_0_V_write <= ap_const_logic_1;
        else 
            p_dst_data_stream_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    p_dst_data_stream_1_V_blk_n_assign_proc : process(p_dst_data_stream_1_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter5, ap_reg_pp0_iter4_exitcond_reg_589)
    begin
        if (((ap_reg_pp0_iter4_exitcond_reg_589 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            p_dst_data_stream_1_V_blk_n <= p_dst_data_stream_1_V_full_n;
        else 
            p_dst_data_stream_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_dst_data_stream_1_V_din <= 
        ap_const_lv8_EF when (tmp_33_fu_530_p2(0) = '1') else 
        p_u_V_reg_668;

    p_dst_data_stream_1_V_write_assign_proc : process(ap_enable_reg_pp0_iter5, ap_reg_pp0_iter4_exitcond_reg_589, ap_block_pp0_stage0_11001)
    begin
        if (((ap_reg_pp0_iter4_exitcond_reg_589 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_dst_data_stream_1_V_write <= ap_const_logic_1;
        else 
            p_dst_data_stream_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    p_dst_data_stream_2_V_blk_n_assign_proc : process(p_dst_data_stream_2_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter5, ap_reg_pp0_iter4_exitcond_reg_589)
    begin
        if (((ap_reg_pp0_iter4_exitcond_reg_589 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            p_dst_data_stream_2_V_blk_n <= p_dst_data_stream_2_V_full_n;
        else 
            p_dst_data_stream_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_dst_data_stream_2_V_din <= 
        ap_const_lv8_EF when (tmp_35_fu_543_p2(0) = '1') else 
        p_v_V_reg_674;

    p_dst_data_stream_2_V_write_assign_proc : process(ap_enable_reg_pp0_iter5, ap_reg_pp0_iter4_exitcond_reg_589, ap_block_pp0_stage0_11001)
    begin
        if (((ap_reg_pp0_iter4_exitcond_reg_589 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_dst_data_stream_2_V_write <= ap_const_logic_1;
        else 
            p_dst_data_stream_2_V_write <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_fu_271_p3),15));
    p_shl1_fu_271_p3 <= (ap_reg_pp0_iter2_tmp_94_reg_598 & ap_const_lv6_0);
    p_shl2_cast_fu_289_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl2_fu_282_p3),15));
    p_shl2_fu_282_p3 <= (ap_reg_pp0_iter2_tmp_94_reg_598 & ap_const_lv1_0);
    p_shl3_cast_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl3_fu_299_p3),16));
    p_shl3_fu_299_p3 <= (ap_reg_pp0_iter2_tmp_95_reg_607 & ap_const_lv7_0);
    p_shl4_cast_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl4_fu_226_p3),16));
    p_shl4_fu_226_p3 <= (tmp_94_reg_598 & ap_const_lv7_0);
    p_shl5_cast_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl5_fu_237_p3),16));
    p_shl5_fu_237_p3 <= (tmp_94_reg_598 & ap_const_lv4_0);
    p_shl8_cast1_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl8_fu_339_p3),13));
    p_shl8_cast_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl8_fu_339_p3),16));
    p_shl8_fu_339_p3 <= (ap_reg_pp0_iter2_tmp_96_reg_614 & ap_const_lv4_0);
    p_shl9_cast_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl9_fu_354_p3),13));
    p_shl9_fu_354_p3 <= (ap_reg_pp0_iter2_tmp_96_reg_614 & ap_const_lv1_0);
    p_shl_cast_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_400_p3),16));
    p_shl_fu_400_p3 <= (ap_reg_pp0_iter2_tmp_96_reg_614 & ap_const_lv7_0);

    p_src_data_stream_0_V_blk_n_assign_proc : process(p_src_data_stream_0_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_reg_589)
    begin
        if (((exitcond_reg_589 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_src_data_stream_0_V_blk_n <= p_src_data_stream_0_V_empty_n;
        else 
            p_src_data_stream_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_src_data_stream_0_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_reg_589, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_reg_589 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_src_data_stream_0_V_read <= ap_const_logic_1;
        else 
            p_src_data_stream_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    p_src_data_stream_1_V_blk_n_assign_proc : process(p_src_data_stream_1_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_reg_589)
    begin
        if (((exitcond_reg_589 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_src_data_stream_1_V_blk_n <= p_src_data_stream_1_V_empty_n;
        else 
            p_src_data_stream_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_src_data_stream_1_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_reg_589, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_reg_589 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_src_data_stream_1_V_read <= ap_const_logic_1;
        else 
            p_src_data_stream_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    p_src_data_stream_2_V_blk_n_assign_proc : process(p_src_data_stream_2_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_reg_589)
    begin
        if (((exitcond_reg_589 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_src_data_stream_2_V_blk_n <= p_src_data_stream_2_V_empty_n;
        else 
            p_src_data_stream_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_src_data_stream_2_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_reg_589, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_reg_589 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_src_data_stream_2_V_read <= ap_const_logic_1;
        else 
            p_src_data_stream_2_V_read <= ap_const_logic_0;
        end if; 
    end process;

    p_u_V_fu_486_p3 <= 
        ap_const_lv8_10 when (icmp5_fu_481_p2(0) = '1') else 
        u_V_reg_642;
    p_v_V_fu_509_p3 <= 
        ap_const_lv8_10 when (icmp8_fu_503_p2(0) = '1') else 
        v_V_fu_459_p4;
    p_y_V_fu_474_p3 <= 
        ap_const_lv8_10 when (icmp_fu_469_p2(0) = '1') else 
        y_V_reg_637;
    tmp1_fu_314_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_306_p1) + unsigned(tmp_cast_fu_310_p1));
    tmp2_cast_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_reg_622),16));
    tmp35_fu_215_p3 <= (ap_const_lv5_10 & tmp_95_reg_607);
    tmp4_cast_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp4_reg_647),18));
    tmp4_fu_424_p2 <= std_logic_vector(unsigned(tmp_56_cast_fu_417_p1) + unsigned(tmp_57_cast_fu_420_p1));
    tmp_20_fu_262_p1 <= OP2_V_1_cast1_fu_209_p1(8 - 1 downto 0);
    tmp_20_fu_262_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(ap_const_lv16_FFB6) * signed('0' &tmp_20_fu_262_p1))), 16));
    tmp_27_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_7_reg_627),42));
    tmp_28_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_3_fu_365_p2),42));
    tmp_29_fu_453_p2 <= std_logic_vector(unsigned(ap_const_lv18_8000) + unsigned(tmp4_cast_fu_450_p1));
    tmp_31_fu_517_p2 <= "1" when (unsigned(p_y_V_reg_662) > unsigned(ap_const_lv8_EB)) else "0";
    tmp_33_fu_530_p2 <= "1" when (unsigned(p_u_V_reg_668) > unsigned(ap_const_lv8_EF)) else "0";
    tmp_35_fu_543_p2 <= "1" when (unsigned(p_v_V_reg_674) > unsigned(ap_const_lv8_EF)) else "0";
    tmp_56_cast_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_572_p3),17));
    tmp_57_cast_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_5_fu_411_p2),17));
    tmp_90_fu_493_p4 <= tmp_29_fu_453_p2(15 downto 12);
    tmp_cast_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_s_fu_293_p2),16));
    tmp_s_fu_323_p2 <= std_logic_vector(unsigned(tmp2_cast_fu_320_p1) + unsigned(tmp1_fu_314_p2));
    v_V_fu_459_p4 <= tmp_29_fu_453_p2(15 downto 8);
end behav;
